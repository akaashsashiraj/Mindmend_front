// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid()) @map("_id") @db.Uuid
  email     String   @unique
  password  String
  name      String?
  phone     String?
  role      String   @default("PARENT") // Possible values: PARENT, DOCTOR
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Parent    Parent?
  Doctor    Doctor?
}

model Parent {
  id        String   @id @default(uuid()) @map("_id") @db.Uuid
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  children  Child[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Child {
  id              String               @id @default(uuid()) @map("_id") @db.Uuid
  parentId        String               @db.Uuid
  parent          Parent               @relation(fields: [parentId], references: [id])
  name            String
  age             Int
  autismLevel     String               @default("MILD") // Possible values: MILD, MODERATE, SEVERE
  progressNotes   Json?
  sessionHistory  Json?
  therapySessions TherapySession[]
  ebookProgress   ChildEbookProgress[] // New relation
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

model Doctor {
  id               String           @id @default(uuid()) @map("_id") @db.Uuid
  userId           String           @unique @db.Uuid
  user             User             @relation(fields: [userId], references: [id])
  specialization   String
  licenseNumber    String           @unique
  practiceLocation String?
  availableSlots   Json?
  therapySessions  TherapySession[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model TherapySession {
  id          String   @id @default(uuid()) @map("_id") @db.Uuid
  childId     String   @db.Uuid
  doctorId    String   @db.Uuid
  child       Child    @relation(fields: [childId], references: [id])
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  sessionDate DateTime
  sessionType String   @default("ONLINE") // Possible values: ONLINE, IN_PERSON
  status      String   @default("PENDING") // Possible values: PENDING, CONFIRMED, COMPLETED, CANCELED
  notes       String?
  reminderUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Ebook {
    id          Int      @id @default(autoincrement())
    title       String
    author      String
    illustrator String
    bookNumber  Int
    description String
    categories  String   // Stored as a JSON string or comma-separated values
    readingTimeMin Int
    content     String   // JSON string containing pages
    difficulty  String
    isActive    Boolean
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

  // Optional relationship to Child if you want to track reading progress
  childReads  ChildEbookProgress[]
}

// Model to track children's progress with ebooks
model ChildEbookProgress {
  id          String   @id @default(uuid()) @map("_id") @db.Uuid
  childId     String   @db.Uuid
  ebookId     Int
  child       Child    @relation(fields: [childId], references: [id])
  ebook       Ebook    @relation(fields: [ebookId], references: [id])
  progress    Int      @default(0) // Percentage of completion
  lastPage    Int      @default(0)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([childId, ebookId])
}
